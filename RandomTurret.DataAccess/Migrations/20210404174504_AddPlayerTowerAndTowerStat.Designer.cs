// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RandomTurret.DataAccess;

namespace RandomTurret.DataAccess.Migrations
{
    [DbContext(typeof(RandomTurretContext))]
    [Migration("20210404174504_AddPlayerTowerAndTowerStat")]
    partial class AddPlayerTowerAndTowerStat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("RandomTurret.Entities.PlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RandomTurret.Entities.StatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("RandomTurret.Entities.TowerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PlayerEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TowerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerEntityId");

                    b.ToTable("Towers");
                });

            modelBuilder.Entity("RandomTurret.Entities.TowerStatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StatEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TowerEntityId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("StatEntityId");

                    b.HasIndex("TowerEntityId");

                    b.ToTable("TowerStats");
                });

            modelBuilder.Entity("RandomTurret.Entities.TowerEntity", b =>
                {
                    b.HasOne("RandomTurret.Entities.PlayerEntity", "PlayerEntity")
                        .WithMany()
                        .HasForeignKey("PlayerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerEntity");
                });

            modelBuilder.Entity("RandomTurret.Entities.TowerStatEntity", b =>
                {
                    b.HasOne("RandomTurret.Entities.StatEntity", "StatEntity")
                        .WithMany()
                        .HasForeignKey("StatEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomTurret.Entities.TowerEntity", "TowerEntity")
                        .WithMany()
                        .HasForeignKey("TowerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatEntity");

                    b.Navigation("TowerEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
